To reflect the unique entries as 'Unique' instead of 'Single Entry' in the validation column, you can update the script as follows:

import pandas as pd
import re

# Read data from the Excel sheet
df = pd.read_excel('data.xlsx')

# Function to validate Challenge Code
def validate_challenge_code(code):
    code = str(code)
    
    # Check if the first 8 characters contain any special characters and the 9th character is a hyphen
    if re.match(r'^[^\w]{0,8}-', code):
        return 'Not Valid'
    else:
        return 'Valid'

# Function to validate Bitlocker Key
def validate_bitlocker_key(key):
    key = str(key)
    
    # Check if the key has the specific format of 6 numbers followed by a hyphen, repeated 8 times, and overall length of 55
    if re.match(r'^\d{6}(-\d{6}){7}$', key) and len(key) == 55:
        return 'Valid'
    else:
        return 'Not Valid'

# Validate no null values or blanks in Employee ID, Cell Number, Device Number, Challenge Code, and Bitlocker Key
for column in ['Employee ID', 'Cell Number', 'Device Number', 'Challenge Code', 'Bitlocker Key']:
    df[column + ' Validation'] = df[column].apply(lambda x: 'Valid' if x and not pd.isnull(x) else 'Not Valid')

# Function to validate unique entries for the same Employee ID with the same Cell Number but different devices
def validate_multiple_entries(row):
    employee_id = row['Employee ID']
    cell_number = row['Cell Number']
    device_number = row['Device Number']
    
    # Check for unique entries with the same Employee ID and Cell Number but different Device Numbers
    if df[(df['Employee ID'] == employee_id) & (df['Cell Number'] == cell_number) & (df['Device Number'] != device_number)].shape[0] > 0:
        return 'Multiple Entries'
    else:
        return 'Unique'

# Add a new column 'Entry Validation' in the DataFrame
df['Entry Validation'] = df.apply(validate_multiple_entries, axis=1)

# Add new columns for Challenge Code and Bitlocker Key validation results
df['Challenge Code Validity'] = df['Challenge Code'].apply(validate_challenge_code)
df['Bitlocker Key Validity'] = df['Bitlocker Key'].apply(validate_bitlocker_key)

# Save the updated DataFrame with the validation results to a new Excel file
df.to_excel('data_with_validation_results.xlsx', index=False)


In this updated script:
- The 'Single Entry' category has been replaced with 'Unique' in the 'Entry Validation' column for entries with the same Employee ID and Cell Number but different Device Numbers.
- The rest of the script remains the same, including the validation for null values or blanks and the validation for Challenge Code and Bitlocker Key.
- The updated DataFrame with the validation results is saved to a new Excel file named 'data_with_validation_results.xlsx'.

Please adjust the script based on your specific column names and requirements. Run this updated script in your Python environment to validate the entries and generate the Excel file with the updated validation results.
