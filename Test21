Apologies for the confusion. To retrieve all the users' information in an organization, you need to use the GitHub REST API's "List organization members" endpoint with pagination. By default, this endpoint returns a maximum of 30 members per page. To fetch all the members, you need to make multiple requests, iterating through the pages until you have retrieved all the members.

Here's an updated version of the script that retrieves all the users' information in an organization:

```python
import requests
import openpyxl
from openpyxl.styles import Font

organization = "your_organization"
access_token = "your_access_token"

def get_organization_members():
    url = f"https://api.github.com/orgs/{organization}/members"
    headers = {"Authorization": f"Bearer {access_token}"}
    response = requests.get(url, headers=headers)
    return response.json()

def get_user_info(username):
    url = f"https://api.github.com/users/{username}"
    headers = {"Authorization": f"Bearer {access_token}"}
    response = requests.get(url, headers=headers)
    return response.json()

def get_repo_details(username):
    url = f"https://api.github.com/users/{username}/repos"
    headers = {"Authorization": f"Bearer {access_token}"}
    response = requests.get(url, headers=headers)
    return response.json()

def get_commit_stats(username, repo_name):
    url = f"https://api.github.com/repos/{username}/{repo_name}/stats/contributors"
    headers = {"Authorization": f"Bearer {access_token}"}
    response = requests.get(url, headers=headers)
    return response.json()

def export_to_excel(data):
    workbook = openpyxl.Workbook()
    sheet = workbook.active
    sheet.title = "GitHub Stats"
    sheet["A1"] = "Username"
    sheet["B1"] = "Repository"
    sheet["C1"] = "Lines Added"
    sheet["D1"] = "Lines Removed"
    sheet["E1"] = "Total Lines"

    bold_font = Font(bold=True)
    for cell in sheet["1:1"]:
        cell.font = bold_font

    row = 2
    for item in data:
        sheet.cell(row=row, column=1).value = item["username"]
        sheet.cell(row=row, column=2).value = item["repo_name"]
        sheet.cell(row=row, column=3).value = item["lines_added"]
        sheet.cell(row=row, column=4).value = item["lines_removed"]
        sheet.cell(row=row, column=5).value = item["total_lines"]
        row += 1

    workbook.save("github_stats.xlsx")

def main():
    members = []
    page = 1
    per_page = 100

    while True:
        url = f"https://api.github.com/orgs/{organization}/members?page={page}&per_page={per_page}"
        headers = {"Authorization": f"Bearer {access_token}"}
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            members_page = response.json()
            if len(members_page) == 0:
                break
            members.extend(members_page)
            page += 1
        else:
            print("Error occurred while fetching organization members:")
            print(f"Status Code: {response.status_code}")
            print(f"Response Content: {response.content}")
            return

    data = []

    for member in members:
        username = member["login"]
        user_info = get_user_info(username)
        repos = get_repo_details(username)

        for repo in repos:
            commit_stats = get_commit_stats(username, repo["name"])

            for contributor in commit_stats:
                if contributor["author"]["login"] == username:
                    lines_added = contributor["weeks"][-1]["a"]
                    lines_removed = contributor["weeks"][-1]["d"]
                    total_lines = contributor["weeks"][-1]["c"]

                    data.append({
                        "username": username,
                        "repo_name": repo["name"],
                        "lines_added": lines_added,
                        "lines_removed": lines_removed,
                        "total_lines": total_lines
                    })

    export_to_excel(data)

if __name__ == "__main__":
    main()
```

In this updated script, the `get_organization_members` function uses pagination to retrieve all the members in the organization. It makes requests to the API with increasing page numbers until an empty response is received, indicating that all members have been fetched.

Please replace `"your_organization"` with your GitHub organization name and `"your_access_token"` with your personal access token.

This script will fetch all the users' information in the organization and export the data to an Excel sheet as before.
