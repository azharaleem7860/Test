If you are still getting an empty Excel sheet with only column names, you can try using a different method to update the Excel sheet. One alternative approach is to use the `pandas` library, which provides a convenient way to manipulate and write data to Excel files.

Here's an updated version of the code that uses `pandas` to write data to the Excel sheet:

```python
import boto3
import pandas as pd

def get_all_pipelines():
    client = boto3.client('codepipeline')
    response = client.list_pipelines()
    return response['pipelines']

def get_pipeline_history(pipeline_name):
    client = boto3.client('codepipeline')
    response = client.list_pipeline_executions(pipelineName=pipeline_name)
    return response['pipelineExecutionSummaries']

def get_pipeline_execution_details(pipeline_name, execution_id):
    client = boto3.client('codepipeline')
    response = client.get_pipeline_execution(
        pipelineName=pipeline_name,
        pipelineExecutionId=execution_id
    )
    return response.get('pipelineExecution')

def main():
    pipelines = get_all_pipelines()

    data = []
    columns = ['Pipeline Name', 'Execution ID', 'Status', 'Start Time', 'End Time', 'Stage Name', 'Status', 'Start Time', 'End Time']

    for pipeline in pipelines:
        pipeline_name = pipeline['name']
        history = get_pipeline_history(pipeline_name)

        for execution in history:
            execution_id = execution['pipelineExecutionId']
            status = execution['status']
            start_time = execution['startTime']
            end_time = execution['lastUpdateTime']

            execution_details = get_pipeline_execution_details(pipeline_name, execution_id)
            if execution_details:
                stages = execution_details.get('stageStates')
                if stages:
                    for stage in stages:
                        stage_name = stage.get('stageName')
                        if stage_name:
                            stage_status = None  # Initialize stage_status with a default value
                            if 'latestExecution' in stage and 'status' in stage['latestExecution']:
                                stage_status = stage['latestExecution']['status']
                            stage_start_time = stage['latestExecution']['startTime']
                            stage_end_time = stage['latestExecution']['endTime']

                            data.append([pipeline_name, execution_id, status, start_time, end_time, stage_name, stage_status, stage_start_time, stage_end_time])
                        else:
                            print(f"Stage name not found for pipeline: {pipeline_name}, execution ID: {execution_id}")
            else:
                print(f"Pipeline execution details not found for pipeline: {pipeline_name}, execution ID: {execution_id}")

    df = pd.DataFrame(data, columns=columns)
    df.to_excel('pipeline_history.xlsx', index=False)

if __name__ == '__main__':
    main()
```

In this updated version, the `pandas` library is imported, and a list called `data` is created to store the data rows. The `columns` list is defined to store the column names.

Inside the loop, instead of appending rows to the worksheet, the data is appended to the `data` list as a list of values.

After collecting all the data, a `DataFrame` is created using `pandas`, with the `data` list and `columns` list. Finally, the `DataFrame` is written to an Excel file using the `to_excel()` method.

Make sure you have the `pandas` library installed in your Python environment (`pip install pandas`) before running the updated code.

This approach using `pandas` provides more flexibility and control over writing data to the Excel sheet.
