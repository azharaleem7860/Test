To get the 10 states with the highest test positivity rate for tests performed in the last 30 days from the date provided, we can add the following function to the existing program:

# Function to get the 10 states with the highest test positivity rate
def get_highest_positivity_rate(full_api_data, target_date):
    df = pd.DataFrame(full_api_data)
    
    print(f"Target date for test positivity rate is {target_date}")
    
    positivity_rates = {}
    start_date = target_date - timedelta(days=30)
    print(f"start date is {start_date}")
    
    for state in df['state'].unique():
        state_data = df[df['state'] == state]
        start_date_str = start_date.strftime('%Y-%m-%d')
        end_date_str = target_date
        state_data['date'] = pd.to_datetime(state_data['date']).dt.strftime('%Y-%m-%d')
        state_data = state_data[(state_data['date'] >= start_date_str) & (state_data['date'] <= end_date_str)]
        total_tests = state_data['total_results_reported'].sum()
        positive_tests = state_data['positive_results_reported'].sum()
        positivity_rate = positive_tests / total_tests if total_tests != 0 else 0
        positivity_rates[state] = positivity_rate
    
    sorted_positivity_rates = sorted(positivity_rates.items(), key=lambda x: x[1], reverse=True)
    top_10_states = sorted_positivity_rates[:10]
    
    return top_10_states


Then, in the main() function, you can call this function and print the results as follows:

# Main function to run the analysis
def main():
    with warnings.catch_warnings():
        warnings.simplefilter("ignore") #Ingore warnings
        #date = "2024-05-21"
        base_url = "https://healthdata.gov/resource/j8mb-icvb.json"
        target_date = datetime.now().strftime('%Y-%m-%d')
        print(f"target date is {target_date}")
        target_date_str = input("Enter the target date in the format (YYYY-MM-DD):")
        target_date = datetime.strptime(target_date_str, '%Y-%m-%d')
        target_date = target_date.strftime('%Y-%m-%d')
        print(f"Updated target date is {target_date}")
        full_api_data = get_testing_data(base_url, target_date)
        total_pcr_tests = get_total_pcr_tests(full_api_data, target_date )
        print(f"Total PCR tests performed up to  {target_date}  in the United States is: {total_pcr_tests}")
        rolling_average = calculate_rolling_average(full_api_data, date.fromisoformat(target_date))
        print(f"7-day rolling average of new cases per day for the last 30 days from  {target_date}:   {rolling_average}")
        top_10_states = get_highest_positivity_rate(full_api_data, target_date)
        print("10 states with the highest test positivity rate:")
        for state, positivity_rate in top_10_states:
            print(f"{state}: {positivity_rate}")


This will add the functionality to get the 10 states with the highest test positivity rate for tests performed in the last 30 days from the provided date.
